{"version":3,"sources":["constants/env.js","serviceWorker.js","index.js"],"names":["NET_TYPE_ID","parseInt","process","NET_TYPE_NAME","isMainnet","isDevMode","DEV_MODE","isDesktop","PLATFORM","API_URL","REACT_APP_API_URL_TESTNET_DEVELOP","REACT_APP_API_URL_TESTNET","OFFSHORE_ENABLED","Boolean","window","location","hostname","match","then","desktop","startDesktopAppInDevMode","startDesktopApp","web","startWebAppInDevMode","startWebApp","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kHAAA,8OAAO,IAAMA,EAAcC,SAASC,KAEvBC,EAAgBD,UAOhBE,EAAY,WACvB,OAAuB,IAAhBJ,GAGIK,EAAY,WACvB,OAAOC,GAOIC,EAAY,WACvB,OAAOC,GAiBIC,EAXPL,IACOC,IACLH,gCACAA,OAEKG,IACLH,0QAAYQ,kCACZR,0QAAYS,0BAOPC,EAAmBL,MAAgC,IAAhBH,K,oEC7B5BS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WChBFV,cACF,0EAA8BW,MAAK,SAAAC,GACjCd,cACIc,EAAQC,2BACRD,EAAQE,qBAGd,2DAA0BH,MAAK,SAAAI,GAC7BjB,cAAciB,EAAIC,uBAAyBD,EAAIE,iBDwH7C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMT,MAAK,SAAAU,GACjCA,EAAaC,kB","file":"static/js/main.bdeefdf2.chunk.js","sourcesContent":["export const NET_TYPE_ID = parseInt(process.env.REACT_APP_NET_TYPE_ID);\nexport const APP_VERSION = process.env.REACT_APP_VERSION;\nexport const NET_TYPE_NAME = process.env.REACT_APP_NET_TYPE_NAME;\nexport const MODE = process.env.NODE_ENV;\nexport const PLATFORM = process.env.REACT_APP_PLATFORM;\n\nexport const DEV_MODE = \"development\";\nexport const PRODUCTION_MODE = \"production\";\n\nexport const isMainnet = () => {\n  return NET_TYPE_ID === 0;\n};\n\nexport const isDevMode = () => {\n  return DEV_MODE === MODE;\n};\n\nexport const isWeb = () => {\n  return PLATFORM === \"web\";\n};\n\nexport const isDesktop = () => {\n  return PLATFORM === \"desktop\";\n};\n\nlet apiUrl;\n\nif (isWeb()) {\n  if (isMainnet()) {\n    apiUrl = isDevMode()\n      ? process.env.REACT_APP_API_URL_MAINNET_DEVELOP\n      : process.env.REACT_APP_API_URL_MAINNET;\n  } else {\n    apiUrl = isDevMode()\n      ? process.env.REACT_APP_API_URL_TESTNET_DEVELOP\n      : process.env.REACT_APP_API_URL_TESTNET;\n  }\n}\n\nexport const API_URL = apiUrl;\n\n\nexport const OFFSHORE_ENABLED = isDesktop() && (isMainnet() === false);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n// Check for browser support of service worker\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as serviceWorker from \"./serviceWorker\";\nimport { isDesktop, isDevMode } from \"./constants/env\";\n\nif (isDesktop()) {\n  import(\"./platforms/desktop\").then(desktop => {\n    isDevMode()\n      ? desktop.startDesktopAppInDevMode()\n      : desktop.startDesktopApp();\n  });\n} else {\n  import(\"./platforms/web\").then(web => {\n    isDevMode() ? web.startWebAppInDevMode() : web.startWebApp();\n  });\n}\n\nserviceWorker.unregister();\n"],"sourceRoot":""}